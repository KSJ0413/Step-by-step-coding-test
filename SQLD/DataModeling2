DDL(Data Definition Language) 테이블 관련
Create : 생성(데이터베이스 객체)
Alter : 변경(객체의 속성)
Rename : 이름 변경(데이터베이스 객체)
Drop : 삭제(데이터베이스내 객체)
Truncate : 삭제(테이블 내 테이블) 테이블을 최초 생성된 초기 상태로 만듬

DML(Data Manipulation Language) 컬럼 만들고 조회 삭제
Select : 데이터베이스에서 데이터를 검색할 때 사용한다.
Insert : 테이블에서 행(row)을 입력한다
Update : 행(row)을 변경한다
Delete : 행(row)을 삭제한다
Merge : 존재하지 않으면 Insert, 존재하면 Update를 수행한다.

DCL(Data Control Language) 데이터베이스 및 해당 구조에 대한 액세스 권한을 부여하거나 제거한다.
Grant
Revoke

TCL(Transaction Control Language) DML문에 의한 데이터 변경과 같은 작업은 트랜잭션으로 볼 수 있는데, 이러한 작업을 완료 또는 취소하기 위한 명령이다.
Commit
Rollback
Save Point


NULL 값 정의 
NULL은 알 수 없는 값
0도 공백 문자도 아님
NULL을 포함한 사칙연산의 결과는 NULL
숫자를 0 으로 나누면 에러가 발생되지만 NULL로 나누면 NULL
IS NULL, IS NOT NULL만으로 비교 가능

제약조건(Constraint)
NOT NULL : 칼럼이 NULL 값을 포함하지 못하도록 지정 
UNIQUE : 칼럼 값이 해당 테이블 전체에서 유일한 값
PRIMARY KEY : NOT NULL & UNIQUE
FOREIGN KEY : 입력되어야 할 값이 다른 테이블의 칼럼 값을 참조
CHECK : 해당 조건을 만족하는 값으로만 입력을 제한

참조 무결성 규정 관련 옵션
** ON DELETE(부모를 삭제할 때)
CASCADE : 부모 값 삭제 시 자식 값 같이 삭제
SET NULL : 부모 값 삭제 시 자식 해당 컬럼 NULL 처리
SET DEFAULT : 부모 값 삭제시 자식 기본값 설정
RESTRICT : 자식테이블에 해당 데이터가 PK로 존재하지 않는 경우만 부모 값 삭제/수정 가능
NO ACTION : 참조 무결성 제약이 걸려있는 경우 삭제 및 수정 불가

**ON INSERT(자식에 입력할 떄)
AUTOMATIC : 부모가 없을 때 부모 입력 후 자식 입력
SET NULL : 부모가 없는 경우 자식의 FK를 NULL
SET DEFAULT : 부모가 없는 경우 FK를 기본값으로
DEPENDENT : 부모의 PK가 있는 경우만 자식 입력

DISTINCT : 중복된 데이터가 있을시 1건으로 처리

트랜잭션의 특성
1) 원자성(Atomicity) 트랜잭션에서 정의된 연산들은 모두 성공적으로 실행되던지 아니면
   전혀 실행되지 않은 상태로 남아 있어야 한다.
2) 일관성(Consistency) 트랜잭션이 실행되기 전의 데이터베이스 내용이 잘못 되어 있지
   않다면  트랜잭션이 실행된 이후에도 데이터베이스의 내용에 잘못이 있으면 안된다.
3) 고립성(Isolation) 트랜잭션이 실행되는 도중에 다른 트랜잭션의 영향을 받아 잘못된 
   결과를 만들어서는 안된다
4) 지속성(Durabilitly) 트랜잭션이 성공적으로 수행되면 그 트랜잭션이 갱신한 
   데이터베이스의 내영은 영구적으로 저장된다.
 
트랜잭션은 데이터베이스의 논리적 연산단위로서 밀접히 관련되어 분리될 수 없는 한개 이상의 데이터
COMMIT은 트랜잭션의 종료를 위한 대표적인 명령어로서 데이터에 대한 변경사항을 데이터베이스에 영구적으로 반영한다.
ROLLBACK은 데이터에 대한 변경사항을 모두 폐기하고 변경 전의 상태로 되돌린다.

내장함수 : 단일행 함수와 다중행 함수로 나뉠수 있으며 다중행 함수는 집계 함수, 그룹 함수, 윈도우 함수로 나뉜다 
단일행 함수
1) 추출되는 각 행마다 작업을 수행
2) 각 행마다 하나의 결과를 반환
3) Select, Where, Order By, Update의  SET 절에 사용가능
4) 데이터 타입 변경 가능
5) 중첩해서 사용 가능
다중 행 함수
1) 여러 개의 행이 입력, 하나의 값 반환
2) 그룹(집계) 함수가 다중 행 함수!
예) SUM, AVG, MAX, MIN, Count, ...

CHR(10) : 줄 바꿈을 의미
REPLACE(C!, CHR(10), '')
'' : Empty string, Zero Length string

NULL 관련 함수
NVL(col, expr) 만일 col이 널이면 expr을 리턴
NVL2(col, expr1, expr2) col이 널이 아니면 expr1, 널이면 expr2를 리턴
NULLIF(expr1, expr2) expr1과 expr2가 같지 않으면 expr1을, 같으면 NULL 리턴
COALESCE(expr1, expr2, ...) 처음으로 널이 아닌 것을 리턴

순수 관계연산자
Select, projection, join, division

Join 종류
EQUI JOIN : 서로 정확하게 일치하는 경우 대부분 PK <=> FK 관계를 기반 /무조건X 
이너조인과 같은 개념 on 이나 using을 필수로 써준다
NON EQUL JOIN : 컬럼 값들이 서로 정확하게 일치하지 않을 경우 = 아닌 다른 연산자들을 사용한다.
CROSS JOIN : 두개의 테이블을 아무 조건없이 연결 시킨다.

집합 연산자
UNION : 결과를 더한다.(중복 제거, 정열 시행)
UNION ALL : 결과를 더한다(중복 제거 X, 정열 시행 X)
INTERSECT : 교집합 결과를 정열
MINUS 차집합


일반 집합 연산자를
SOL과 비교
• UNION 연산은 UNON 기능으로  //합집합연산
• INTERSECTION 연산은 INTERSECT 기능으로 //교집합연산
• DFFERENCE 연산은 EXCEPT(Oracle~ MINUS) 기능으로 //차집합연산
• PRODUCT 연산은 CROSS JOIN 기능으로 구현되었다.  //교집합연산

계층형 함수
LEVEL : 검색 항목의 깊의를 의미한다. 즉 계층 구조에서 가장 상위 레벨이 1이 된다.
CONNECT_BY_ROOT : 계층 구조에서 가장 최상위 값을 표시한다.
CONNECT_BY_ISLEAF : 계층 구조에서 가장 최하위를 표시한다
SYS_CONNECT_PATH : 계층 구조의 전체 전개 경로를 표시한다.
NOCYCLE : 순환 구조가 발생 지점까지만 전개한다.
CONNECT_BY_ISCYCLE : 순환구조 발생 지점을 표시한다.

키의 종류
기본키(Primary Key) : 후보키 중에서 엔터티를 대표할 수 있는 키
후보키(Candidate Key) : 유일성과 최소성을 만족하는 키
슈퍼키(Super Key) : 유일성은 만족하지만 최소성을 만족하지 않는 키
외래키(Foreign Key) : 하나 혹은 다수의 다른 테이블의 기본키 필드를 가리키는 것으로 참조 무결성을 확인하기 위해 사용되는 키

  


